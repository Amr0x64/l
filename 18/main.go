// Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде. По завершению программа должна выводить итоговое значение счетчика.

package main

import (
	"fmt"
	"sync"
)

func main() {
	a := newAtomic()
	m := newMutex()
	wg := new(sync.WaitGroup)
	wg.Add(10000)
	l := 1
	for i := 0; i < 10000; i++ {
		go func(wg *sync.WaitGroup, a *atomicInc, m *mutexInc) {
			defer wg.Done()
			a.Add()
			m.Add()
			l++ // для примера будет ввести счетчик переменной, в которой нет блокирующей операции. Это значит отсутвует атомарность у инкрементирование для этой переменной, что 
			//значит мы не можем гарантировать правильное поведение суммирование его в конкурентной среде
		}(wg, a, m)
	} 
	wg.Wait() 
	fmt.Println(l)
	fmt.Printf("значение счетчика у atomic структуры = %d; mutex = %d", a.Get(), m.Get())
}

